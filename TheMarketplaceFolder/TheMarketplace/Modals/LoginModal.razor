@using Services
@using Shared.Models
@using Modals
@inject Services.UserService.IUserService mUserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager navMan

<!--Modal button-->
<div style="position: fixed; top: 0.5rem; right: 1rem; z-index: 1050;">
@if (!loggedIn)
{
    <button type="button" class="btn btn-outline-success" @onclick="openModal">
        Login
    </button>
} else
{
    <button type="button" class="btn btn-outline-danger" @onclick="onClickLogOut">
        Logout
    </button>
}
</div>

<!--Backdrop for modal-->
@if (modalVisible)
{
    <div class="modal-backdrop fade show" @onclick="closeModal"></div>
}

<!--Modal-->
<div class="modal fade show" id="LoginModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: @(modalVisible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Login</h1>
                <button type="button" class="btn-close" @onclick="closeModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="username">Email:</label>
                        <InputText id="username" @bind-Value="loginEmail"
                        placeholder="Indtast email..." class="form-control" />
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-6 mb-3">
                        <label for="password">Password:</label>
                        <InputText id="password" @bind-Value="loginPW"
                        placeholder="Indtast password..." class="form-control" />
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="closeModal">Close</button>
                <button type="button" class="btn btn-success" @onclick="onClickLogin">Login</button>
            </div>
        </div>
    </div>
</div>

@if (showToast)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Success</strong>
                <small>Just now</small>
                <button type="button" class="btn-close" @onclick="() => showToast = false" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                User successfully created!
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public EventCallback<bool> OnLoginChanged { get; set; }

    private List<User>? mockUsers;
    private User? userLoggedIn;
    public string loginEmail;
    public string loginPW;
    public bool loginError;
    bool modalVisible = false;
    bool loggedIn;
    private bool showToast = false;
    string buttonText => loggedIn ? "Log out" : "Login";

    protected override async Task OnInitializedAsync()
    {
        userLoggedIn = await LocalStorage.GetItemAsync<User>("User Signed In");
        if (userLoggedIn != null)
        {
            Console.WriteLine($"A User is signed in. Name is {userLoggedIn.Name}");
            loggedIn = true;
        }
    }

    private void closeModal()
    {
        modalVisible = false;
    }

    private void openModal()
    {
        modalVisible = true;
    }

    private async void onClickLogin()
    {
        userLoggedIn = await mUserService.LoginMongoDB(loginEmail, loginPW);
        await LocalStorage.SetItemAsync<User>("User Signed In", userLoggedIn);
        if (userLoggedIn != null)
        {
            Console.WriteLine($"Logged In");
            loggedIn = true;
            await OnLoginChanged.InvokeAsync(true);
            await ShowToast();
            closeModal();
        } else
        {
            loggedIn = false;
            loginError = true;
            Console.WriteLine("Login error");
        }
        StateHasChanged();
    }

    private async void onClickLogOut()
    {
        await LocalStorage.RemoveItemAsync("User Signed In");
        Console.WriteLine($"Logout called");
        await OnLoginChanged.InvokeAsync(false);
        navMan.NavigateTo("/");
        StateHasChanged();
    }

    public async Task ShowToast()
    {
        // Renderer toast
        showToast = true;
        StateHasChanged();
        //Viser toast i 3 sekunder (ms)
        await Task.Delay(3000);
        //Skjuler toast
        showToast = false;
        StateHasChanged();
    }
}
