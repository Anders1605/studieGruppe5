@using Services
@using Shared.Models
@using Modals
@inject Services.UserService.IUserService mUserService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<!--Modal button-->
@if (loggedIn != true)
{
    <button type="button" class="btn btn-success" @onclick="openModal">
        Sign Up
    </button>
}

<!--Backdrop for modal-->
@if (modalVisible)
{
    <div class="modal-backdrop fade show" @onclick="closeModal"></div>
}

<!--Modal-->
<div class="modal fade show" id="SignUpModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true" style="display: @(modalVisible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Login</h1>
                <button type="button" class="btn-close" @onclick="closeModal" aria-label="Close"></button>
            </div>
            <EditForm Model="@newUser" OnSubmit="@onSubmit" class="row p-3">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div>
                    <label for="Name">Full Name</label>
                    <InputText id="Name" @bind-Value="newUser.Name" class="form-control" />
                </div>
                <div>
                    <label for="emailaddress">Emailaddress</label>
                    <InputText id="emailaddress" @bind-Value="newUser.EmailAddress" class="form-control" />
                </div>
                <div>
                    <label for="Telephonenumber">Telephonenumber</label>
                    <InputText id="Telephonenumber" @bind-Value="newUser.TelephoneNumber" class="form-control" />
                </div>
                <div>
                    <label for="Address">Address</label>
                    <InputText id="Address" @bind-Value="newUser.Address" class="form-control" />
                </div>
                <div>
                    <label for="profilePicture"> Upload ProfilePicture</label>
                    <InputText id="profilePicture" @bind-Value="newUser.ProfilePictureUrl" class="form-control" />
                </div>
                <div>
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="newUser.Password" class="form-control" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="closeModal">Close</button>
                    <button type="submit" class="btn btn-success">Submit</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@if (showToast)
{
    <div class="toast-container position-fixed bottom-0 end-0 p-3">
        <div class="toast show" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto">Success</strong>
                <small>Just now</small>
                <button type="button" class="btn-close" @onclick="() => showToast = false" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                User successfully created!
            </div>
        </div>
    </div>
}


@code {
    private List<User>? mockUsers;
    bool modalVisible = false;
    bool loggedIn;
    private bool showToast = false;
    User newUser = new();

    private async Task onSubmit()
    {
        await mUserService.createUser(newUser);
        Console.WriteLine("User was created in DB");
        newUser = new();
        closeModal();
        await ShowToast();
    }

    public async Task ShowToast()
    {
        // Renderer toast
        showToast = true;
        StateHasChanged(); 
        //Viser toast i 3 sekunder (ms)
        await Task.Delay(3000); 
        //Skjuler toast
        showToast = false;
        StateHasChanged();
    }

    private void closeModal()
    {
        modalVisible = false;
    }

    private void openModal()
    {
        modalVisible = true;
    }
}
