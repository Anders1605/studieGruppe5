@page "/myoffers"
@using Services.OfferService;
@using Shared.Models;
@using System.Diagnostics
@using TheMarketplace.Services.UserService
@inject IOfferService offerService;
@inject IUserService userService;
@inject NavigationManager navMan

<h3>My Offers</h3>
@if (loggedIn)
{
    @if (ListingOffers is not null)
    {
        <h3>Pending Offers</h3>
        @foreach (var listing in ListingOffers)
        {
            <div class="row">
                <div class="col-md-6">
                    <ul class="list-group">
                        @foreach (var offer in listing.OfferEmbedded.Where(x => x.OfferAccepted is false))
                        {
                            <li class="list-group-item d-flex justify-content-between align-items-start">
                                <div>
                                    <h5>@listing.Title</h5>
                                    <p>Price: @listing.Price</p>
                                    <p>Buyer: @offer.Buyer.Name</p>
                                </div>
                                <button class="btn btn-success" @onclick="() => AcceptOffer(offer,listing.ListingId)">
                                    Accept Offer
                                </button>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

        <h3>Accepted Offers</h3>
        @foreach (var listing in ListingOffers)
        {
            <div class="row">
                <div class="col-md-6">
                    <ul class="list-group">
                        @foreach (var offer in listing.OfferEmbedded.Where(x => x.OfferAccepted is true))
                        {
                            <li class="list-group-item">
                                <h5>@listing.Title</h5>
                                <p>Price: @listing.Price</p>
                                <p>Buyer: @offer.Buyer.Name</p>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        }

        @* test for submitting offer, needs to be added to Listing Page, this line of code is difficult to test, since the offerService only fetches listingoffers. *@
        <button class="btn btn-warning mt-3" @onclick="() =>SubmitOffer(ListingOffers[2])">Submit a test offer</button>
    }
    @if (ListingOffers is null)
    {
        <p>You have no offers waiting!</p>
    }
}
@if (loggedIn!)
{
    <TheMarketplace.Modals.LoginModal OnLoginChanged="HandleLoginChanged" />
}



@code {

    public List<Listing>? ListingOffers;

    public User MockBuyer;

    public User? UserLoggedIn;

    public User MockSeller;

    public bool loggedIn;

    private async Task HandleLoginChanged(bool isLoggedIn)
    {
        loggedIn = isLoggedIn;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        loggedIn = await userService.CheckLogin();

        if (!loggedIn)
        {
            navMan.NavigateTo("/");
        }

        UserLoggedIn = await userService.GetLoggedInUser();

        MockBuyer = new User()
            {
                Name = "Buyer",
                Address = "testAddress",
                EmailAddress = "TestBuyer@email.dk",
                Password = "testPassword",
                ProfilePictureUrl = "none",
                TelephoneNumber = "1234567890"
            };

        MockSeller = new User()
            {
                Name = "Seller",
                Address = "testAddress",
                EmailAddress = "TestSeller@email.dk",
                Password = "testPassword",
                ProfilePictureUrl = "none",
                TelephoneNumber = "0987654321"
            };

        ListingOffers = await offerService.GetAllListingsWithOffers(UserLoggedIn);

        Console.WriteLine(ListingOffers.Count);
    }

    public void ButtonTestClick()
    {
        Console.WriteLine("This is a test");
    }

    public async void AcceptOffer(Offer offerToAccept, int listingId)
    {
        await offerService.AcceptOffer(offerToAccept, listingId);
        ListingOffers = await offerService.GetAllListingsWithOffers(MockSeller);
        Debug.WriteLine(ListingOffers.Count);
    }

    public async void SubmitOffer(Listing itemToSubmitOfferFor)
    {
        await offerService.SubmitOffer(itemToSubmitOfferFor, MockBuyer);
        ListingOffers = await offerService.GetAllListingsWithOffers(MockSeller);
    }

}
